{"version":3,"file":"node_modules_theia_monaco-editor-core_esm_vs_base_common_sync_recursive-glider-theia-extensio-0d2b13.js","mappings":"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","sources":["webpack:///../node_modules/@theia/monaco-editor-core/esm/vs/base/common/ sync?","webpack:///../glider-theia-extension/src/browser/config-data.ts?","webpack:///../glider-theia-extension/src/browser/custom-about-dialogue.tsx?","webpack:///../glider-theia-extension/src/browser/glider-theia-extension-contribution.ts?","webpack:///../glider-theia-extension/src/browser/glider-theia-extension-frontend-module.ts?","webpack:///../glider-theia-extension/src/browser/run-widget.tsx?","webpack:///../node_modules/@theia/core/shared/vscode-languageserver-protocol/index.js?"],"sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = () => ([]);\nwebpackEmptyContext.resolve = webpackEmptyContext;\nwebpackEmptyContext.id = \"../node_modules/@theia/monaco-editor-core/esm/vs/base/common sync recursive\";\nmodule.exports = webpackEmptyContext;","import { injectable } from \"@theia/core/shared/inversify\"\n\n\nexport type ConfigDataInterface = {\n    active: Active[]\n    projects: Project[]\n    sentryDSN: string\n    isLiveInterview: boolean\n    containerName: string\n  }\n  \n  export type Active = {\n    username: string\n    path: string\n    focused: boolean\n  }\n  \n  export type Project = {\n    name: string\n    path: string\n    container_id: string\n    collaboration: boolean\n    source: string\n    build: boolean\n    browser: boolean\n    browser_in_new_tab: boolean\n    browser_url: string\n    browser_button_name: string\n    defaultOpenFolder: string\n    readOnlyFolders: string[]\n    hiddenFolders: string[]\n    hiddenFiles: string[]\n    isSharableContainer: boolean\n    browserUrlSuffix: string,\n    shellCommand: string,\n    runLabel: string,\n    terminal: boolean\n  }\n  \n\n\n@injectable()\nexport class ConfigData {\n    data:ConfigDataInterface\n    async initialize() {\n        console.log(\">>>> collecting data frombackend\");\n        let editorSettings = await (await fetch(\"/editorSettings\")).json();\n        console.log(\">>>> data\", editorSettings);\n        this.data = editorSettings;\n    }\n    constructor(){\n        this.initialize();\n    }\n}","import { AboutDialog } from \"@theia/core/lib/browser/about-dialog\";\nimport { injectable } from \"@theia/core/shared/inversify\";\nimport { ReactNode } from \"@theia/core/shared/react\";\nimport React = require(\"react\");\n\n@injectable()\nexport class CustomizedAboutDialogue extends AboutDialog {\n    protected renderExtensions(): ReactNode {\n        return <>\n            <h3>Modified extensions list</h3>\n        </>;\n    }\n}","import { injectable, inject } from '@theia/core/shared/inversify';\nimport { Command, CommandContribution, CommandRegistry, CommandService, ContributionFilterRegistry, FilterContribution, MenuContribution, MenuModelRegistry, MessageService, URI } from '@theia/core/lib/common';\nimport { AbstractViewContribution, CommonMenus, FrontendApplication, FrontendApplicationContribution, open, OpenerService, PreferenceService } from '@theia/core/lib/browser';\nimport { FileNavigatorContribution } from \"@theia/navigator/lib/browser/navigator-contribution\";\nimport { FrontendApplicationStateService } from '@theia/core/lib/browser/frontend-application-state';\nimport { TerminalWidget } from '@theia/terminal/lib/browser/base/terminal-widget';\nimport { TerminalService } from '@theia/terminal/lib/browser/base/terminal-service';\nimport { TerminalCommands, TerminalMenus } from \"@theia/terminal/lib/browser/terminal-frontend-contribution\";\nimport { MiniBrowserCommands } from '@theia/mini-browser/lib/browser/mini-browser-open-handler';\nimport { Filter } from '@theia/core/lib/common';\nimport { WorkspaceService } from \"@theia/workspace/lib/browser\";\nimport { WindowCommands } from \"@theia/core/lib/browser/window-contribution\";\nimport { WorkspaceCommands } from \"@theia/workspace/lib/browser/workspace-commands\";\nimport { FileSystemCommands } from \"@theia/filesystem/lib/browser/filesystem-frontend-contribution\";\nimport { FileStatNode } from '@theia/filesystem/lib/browser/file-tree/file-tree';\nimport { FileTreeLabelProvider } from '@theia/filesystem/lib/browser/file-tree/file-tree-label-provider';\nimport { GliderRunWidget } from './run-widget';\nimport { Active, ConfigData, ConfigDataInterface } from './config-data';\nimport { EditorManager } from \"@theia/editor/lib/browser/editor-manager\";\nimport { EditorWidget } from \"@theia/editor/lib/browser/editor-widget\";\nimport { MonacoEditor } from \"@theia/monaco/lib/browser/monaco-editor\";\n\nrequire(\"react\")\nexport const GliderTheiaExtensionCommand: Command = {\n    id: 'GliderTheiaExtension.command',\n    label: 'Say Hello'\n};\n\n@injectable()\nexport class GliderTheiaExtensionCommandContribution implements CommandContribution {\n\n    constructor(\n        @inject(MessageService) private readonly messageService: MessageService,\n        @inject(TerminalService) private readonly terminalService: TerminalService,\n        @inject(ConfigData) protected readonly configData: ConfigData,\n    ) { }\n\n    registerCommands(registry: CommandRegistry): void {\n        registry.registerCommand(GliderTheiaExtensionCommand, {\n            execute: async () => {\n                this.messageService.info('Hello from Glider!');\n                let editorSettings = this.configData.data;\n                console.log(\">>>> config data is:\", editorSettings);\n                if (editorSettings.projects[0].terminal) {\n                    let terminalInstance: TerminalWidget;\n                    if (this.terminalService.lastUsedTerminal) {\n                        terminalInstance = this.terminalService.lastUsedTerminal;\n                    } else {\n                        terminalInstance = await this.terminalService.newTerminal({ title: \"Glider WebIDE\" });\n                    }\n                    await terminalInstance.start();\n                    this.terminalService.open(terminalInstance);\n                    terminalInstance.sendText(`${this.configData.data.projects.at(0)?.shellCommand || 'echo Welcome to Glider!'}\\n`);\n\n                }\n\n                // Open the Application URL (if any present) in the Mini Browser\n                let applicationUrl = getApplicationUrl(editorSettings);\n                if (applicationUrl) {\n                    registry.executeCommand(MiniBrowserCommands.OPEN_URL.id, applicationUrl);\n                }\n            }\n        });\n    }\n}\n\n@injectable()\nexport class GliderTheiaExtensionMenuContribution implements MenuContribution {\n    @inject(ConfigData) protected readonly configData: ConfigData;\n    registerMenus(menus: MenuModelRegistry): void {\n        menus.registerMenuAction(CommonMenus.EDIT_FIND, {\n            commandId: GliderTheiaExtensionCommand.id,\n            label: GliderTheiaExtensionCommand.label\n        });\n        // file menu related unregisters\n        menus.unregisterMenuAction(WindowCommands.NEW_WINDOW);\n        menus.unregisterMenuAction(WorkspaceCommands.CLOSE);\n        menus.unregisterMenuAction(\"2_workspace\");\n        menus.unregisterMenuAction(CommonMenus.FILE_OPEN[2]);\n        menus.unregisterMenuAction(CommonMenus.FILE_CLOSE[2]);\n        menus.unregisterMenuAction(FileSystemCommands.UPLOAD);\n\n        // terminal related unregisters..\n        if(!this.configData.data.projects[0].terminal) {\n            menus.unregisterMenuAction(TerminalMenus.TERMINAL_TASKS[1]);\n        }\n        menus.unregisterMenuAction(TerminalMenus.TERMINAL_TASKS[2]);\n        menus.unregisterMenuAction(TerminalCommands.PROFILE_NEW);\n        menus.unregisterMenuAction(TerminalCommands.PROFILE_DEFAULT);\n    }\n}\n\n@injectable()\nexport class ReadOnlyLabelProviderContribution extends FileTreeLabelProvider {\n    @inject(ConfigData) protected readonly configData: ConfigData;\n    canHandle(element: object): number {\n        const project = this.configData.data.projects[0];\n        if (FileStatNode.is(element)) {\n            let fileuri = element.uri;\n            for (const folderpath of project.readOnlyFolders) {\n                const folderuri = new URI(folderpath);\n                if(folderuri.isEqualOrParent(fileuri)){\n                    return super.canHandle(element) + 1;\n                }\n            }\n        }\n        return 0;\n    }\n\n    getIcon(): string {\n        return 'fa fa-star-o';\n    }\n\n    getName(fileStatNode: FileStatNode): string {\n        return super.getName(fileStatNode) + ' (ReadOnly File)';\n    }\n}\nexport const GliderRunWidgetCommand: Command = { id: 'GliderRunWidget:command' };\n\n@injectable()\nexport class GliderRunWidgetContribution extends AbstractViewContribution<GliderRunWidget> {\n    constructor() {\n        super({\n            widgetId: GliderRunWidget.ID,\n            widgetName: GliderRunWidget.LABEL,\n            defaultWidgetOptions: { area: 'left' },\n            toggleCommandId: GliderRunWidgetCommand.id\n        });\n    }\n    registerCommands(commands: CommandRegistry): void {\n        commands.registerCommand(GliderRunWidgetCommand, {\n            execute: () => super.openView({ activate: true, reveal: true })\n        });\n    }\n}\n@injectable()\nexport class GliderTheiaExtensionFrontendApplicationContribution implements FrontendApplicationContribution {\n    @inject(CommandService) private readonly commandService: CommandService;\n    @inject(FrontendApplicationStateService) protected readonly stateService: FrontendApplicationStateService;\n    @inject(FileNavigatorContribution) protected readonly navigatorContribution: FileNavigatorContribution;\n    @inject(WorkspaceService) protected readonly workspaceService: WorkspaceService;\n\n    @inject(OpenerService) protected readonly openerService: OpenerService;\n    @inject(GliderRunWidgetContribution) protected readonly runWidgetContrib: GliderRunWidgetContribution;\n\n    @inject(ConfigData) protected readonly configData: ConfigData;\n    @inject(PreferenceService) protected readonly preferenceService:PreferenceService;\n    @inject(EditorManager) protected readonly editorManager:EditorManager;\n\n    async initializeLayout(): Promise<void> {\n    }\n    async configure(app: FrontendApplication): Promise<void> {\n    }\n    async onStart(app: FrontendApplication): Promise<void> {\n        this.stateService.reachedState('ready').then(async () => {\n            await this.runWidgetContrib.openView({ reveal: true })\n            await this.navigatorContribution.openView({ reveal: true });\n            this.commandService.executeCommand(GliderTheiaExtensionCommand.id);\n            // adding listener to check when one editor widget is being created..\n            this.editorManager.onCreated(editorWidget => {\n                // const root_fs_path = this.workspaceService.workspace?.resource.path;\n                const project = this.configData.data.projects[0];\n                // if(root_fs_path==undefined) return;\n                if(project==undefined) return; \n                const uri = editorWidget.editor.uri;\n                const fspath = uri.path.fsPath();\n                console.log(\"fs path is:\", fspath);\n                // console.log(\"root fs path\", root_fs_path)\n                project.readOnlyFolders.forEach(pathstr => {\n                    const projectFileUri = new URI(pathstr)\n                    if(uri.isEqualOrParent(projectFileUri)) {\n                        //marking editor widget readonly..\n                        if (editorWidget instanceof EditorWidget) { // You could also cast here, but using instanceof is safer\n                            const editor = editorWidget.editor;\n                            if (editor instanceof MonacoEditor) { // You could also cast here, but using instanceof is safer\n                                console.log(\">>> setting editor as read only...\");\n                                 const standaloneMonacoEditor = (editor as any).editor // Gets the actual monaco editor. It is protected, so we have to cast to any beforehand\n                                 standaloneMonacoEditor.updateOptions({ readOnly: true })\n                            }\n                        }\n                    }\n                })\n            })\n            // const roots = await this.workspaceService.roots;\n            // const roots = await this.workspaceService.tryGetRoots();\n            // let root = roots[0];\n            let hiddenFiles:any = {\".theia\":true};\n            this.configData.data.projects[0].hiddenFiles.forEach(f=>{\n                hiddenFiles[f] = true;\n            });\n            console.log(\">>>> hiddenfiles\", hiddenFiles)\n            await this.preferenceService.set(\"files.exclude\",hiddenFiles);\n            let files = this.configData.data.active;\n            console.log(\">>>> file list before\", files)\n            let focusedFile:Active|null = null;\n            files = files.filter(f=>{\n               if(f.focused==false) return true;\n               else {\n                focusedFile = f;\n                return false;\n               } \n            })\n            if(focusedFile!=null) files.push(focusedFile)\n            console.log(\">>>> file list after\", files)\n            files.forEach(file => {\n                const uri = new URI(file.path);\n                open(this.openerService, uri);\n            });\n        });\n    }\n}\n\n@injectable()\nexport class NoDebugFilterContribution implements FilterContribution {\n\n    registerContributionFilters(registry: ContributionFilterRegistry): void {\n        registry.addFilters('*', [\n            // Filter out the main debug contribution at: https://github.com/eclipse-theia/theia/blob/master/packages/debug/src/browser/debug-frontend-application-contribution.ts.\n            filterClassName(name => name !== 'DebugFrontendApplicationContribution')\n        ]);\n    }\n}\n\nfunction filterClassName(filter: Filter<string>): Filter<Object> {\n    console.log(\"pawan .... filterClassName :\", filter);\n    return object => {\n        const className = object.constructor.name;\n        return className\n            ? filter(className)\n            : false;\n    };\n}\n\n@injectable()\nexport class NoSCMFilterContribution implements FilterContribution {\n\n    registerContributionFilters(registry: ContributionFilterRegistry): void {\n        registry.addFilters('*', [\n            // Filter out the main debug contribution at: https://github.com/eclipse-theia/theia/blob/master/packages/debug/src/browser/debug-frontend-application-contribution.ts.\n            filterClassName(name => name !== 'ScmContribution')\n        ]);\n    }\n}\n\n\nfunction getApplicationUrl(editorSettings: ConfigDataInterface): string {\n\n    let applicationEditorSettings = editorSettings?.projects?.[0];\n\n    let applicationUrl = applicationEditorSettings?.browser_url || \"\";\n    if (applicationUrl.trim().startsWith(\"//\")) {\n        applicationUrl = applicationUrl.slice(2);\n    }\n\n    let applicationUrlSuffix = applicationEditorSettings?.browserUrlSuffix || \"\";\n    applicationUrl = applicationUrlSuffix ? (applicationUrl + \"\" + applicationUrlSuffix) : applicationUrl;\n\n    return applicationUrl || \"\";\n}\n","/**\n * Generated using theia-extension-generator\n */\nimport { GliderTheiaExtensionCommandContribution, GliderTheiaExtensionMenuContribution, GliderTheiaExtensionFrontendApplicationContribution, NoDebugFilterContribution, NoSCMFilterContribution, ReadOnlyLabelProviderContribution, GliderRunWidgetContribution } from './glider-theia-extension-contribution';\nimport { CommandContribution, MenuContribution, FilterContribution } from '@theia/core/lib/common';\nimport { ContainerModule } from '@theia/core/shared/inversify';\nimport { bindViewContribution, FrontendApplicationContribution, LabelProviderContribution, WidgetFactory } from '@theia/core/lib/browser';\nimport { AboutDialog } from '@theia/core/lib/browser/about-dialog';\nimport { CustomizedAboutDialogue } from './custom-about-dialogue';\nimport { GliderRunWidget } from './run-widget';\nimport { ConfigData } from './config-data';\n\n\nexport default new ContainerModule((bind, unbind, isBound, rebind) => {\n    bind(ConfigData).toSelf().inSingletonScope();\n    // add your contribution bindings here\n    bind(LabelProviderContribution).to(ReadOnlyLabelProviderContribution);\n    bind(CommandContribution).to(GliderTheiaExtensionCommandContribution);\n    bind(MenuContribution).to(GliderTheiaExtensionMenuContribution);\n\n    bind(FrontendApplicationContribution).to(GliderTheiaExtensionFrontendApplicationContribution);\n    bind(FilterContribution).to(NoDebugFilterContribution);\n    bind(FilterContribution).to(NoSCMFilterContribution);\n    rebind(AboutDialog).to(CustomizedAboutDialogue);\n\n\n    bind(GliderRunWidget).toSelf();\n    bind(WidgetFactory).toDynamicValue(ctx => ({\n        id: GliderRunWidget.ID,\n        createWidget:()=> ctx.container.get<GliderRunWidget>(GliderRunWidget)\n    })).inSingletonScope();\n    bindViewContribution(bind,GliderRunWidgetContribution)\n});\n","import { CommandService, MessageService } from \"@theia/core\";\nimport { ReactWidget } from \"@theia/core/lib/browser\";\nimport { inject, injectable, postConstruct } from \"@theia/core/shared/inversify\";\nimport React = require(\"react\");\nimport { ConfigData } from \"./config-data\";\nimport { GliderTheiaExtensionCommand } from \"./glider-theia-extension-contribution\";\n\n@injectable()\nexport class GliderRunWidget extends ReactWidget {\n\nstatic readonly ID = 'GliderRun:widget';\nstatic readonly LABEL = 'Glider Run';\n\n@postConstruct()\nprotected async init(): Promise < void> {\n    this.id = GliderRunWidget.ID;\n    this.title.label = GliderRunWidget.LABEL;\n    this.title.caption = GliderRunWidget.LABEL;\n    this.title.closable = true;\n    this.title.iconClass = 'fa fa-regular fa-play'; // example widget icon.\n    this.update();\n}\nprotected render(): React.ReactNode {\n    return <div id='widget-container'>\n              <button style={{marginTop:\"5px\"}} className='theia-button primary' title='Run code' onClick={_a => this.runCommand()}> <i className=\"fa fa-regular fa-play\"></i> {this.configData.data?.projects?.at(0)?.runLabel ?? \"Run code\"}</button>\n              <button style={{marginTop:\"5px\"}} className='theia-button primary' title='Full screen' onClick={_a => this.fullScreen()}> <i className=\"fa-regular fa-maximize\"></i> Full Screen</button>\n            \n           </div>\n}\n\n@inject(MessageService)\nprotected readonly messageService!: MessageService;\n@inject(CommandService) private readonly commandService: CommandService;\n@inject(ConfigData) protected readonly configData: ConfigData;\n  \nprotected runCommand(): void {\n    this.messageService.info('Congratulations: Running your code');\n    this.commandService.executeCommand(GliderTheiaExtensionCommand.id);\n}\nprotected fullScreen() {\n    const bodyElement = document.getElementsByTagName(\"body\")[0];\n    bodyElement.requestFullscreen();\n}\n}","module.exports = require('vscode-languageserver-protocol');\n"],"names":[],"sourceRoot":""}