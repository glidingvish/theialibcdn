{"version":3,"file":"vendors-node_modules_theia_monaco_lib_browser_monaco-workspace_js.js","mappings":"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","sources":["webpack:///../node_modules/@theia/markers/src/browser/index.ts?","webpack:///../node_modules/@theia/monaco/src/browser/monaco-editor-model.ts?","webpack:///../node_modules/@theia/monaco/src/browser/monaco-text-model-service.ts?","webpack:///../node_modules/@theia/monaco/src/browser/monaco-workspace.ts?"],"sourcesContent":["// *****************************************************************************\n// Copyright (C) 2017 TypeFox and others.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n// *****************************************************************************\n\nexport * from './marker-manager';\nexport * from './problem/problem-manager';\n","// *****************************************************************************\n// Copyright (C) 2017 TypeFox and others.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n// *****************************************************************************\n\nimport { Position, Range, TextDocumentSaveReason, TextDocumentContentChangeEvent } from '@theia/core/shared/vscode-languageserver-protocol';\nimport { TextEditorDocument, EncodingMode, FindMatchesOptions, FindMatch, EditorPreferences } from '@theia/editor/lib/browser';\nimport { DisposableCollection, Disposable } from '@theia/core/lib/common/disposable';\nimport { Emitter, Event } from '@theia/core/lib/common/event';\nimport { CancellationTokenSource, CancellationToken } from '@theia/core/lib/common/cancellation';\nimport { Resource, ResourceError, ResourceVersion, UNTITLED_SCHEME } from '@theia/core/lib/common/resource';\nimport { Saveable, SaveOptions } from '@theia/core/lib/browser/saveable';\nimport { MonacoToProtocolConverter } from './monaco-to-protocol-converter';\nimport { ProtocolToMonacoConverter } from './protocol-to-monaco-converter';\nimport { ILogger, Loggable, Log } from '@theia/core/lib/common/logger';\nimport { IIdentifiedSingleEditOperation, ITextBufferFactory, ITextModel, ITextSnapshot } from '@theia/monaco-editor-core/esm/vs/editor/common/model';\nimport { IResolvedTextEditorModel } from '@theia/monaco-editor-core/esm/vs/editor/common/services/resolverService';\nimport * as monaco from '@theia/monaco-editor-core';\nimport { StandaloneServices } from '@theia/monaco-editor-core/esm/vs/editor/standalone/browser/standaloneServices';\nimport { ILanguageService } from '@theia/monaco-editor-core/esm/vs/editor/common/languages/language';\nimport { IModelService } from '@theia/monaco-editor-core/esm/vs/editor/common/services/model';\nimport { createTextBufferFactoryFromStream } from '@theia/monaco-editor-core/esm/vs/editor/common/model/textModel';\nimport { editorGeneratedPreferenceProperties } from '@theia/editor/lib/browser/editor-generated-preference-schema';\n\nexport {\n    TextDocumentSaveReason\n};\n\nexport interface WillSaveMonacoModelEvent {\n    readonly model: MonacoEditorModel;\n    readonly reason: TextDocumentSaveReason;\n    readonly options?: SaveOptions;\n    waitUntil(thenable: Thenable<IIdentifiedSingleEditOperation[]>): void;\n}\n\nexport interface MonacoModelContentChangedEvent {\n    readonly model: MonacoEditorModel;\n    readonly contentChanges: TextDocumentContentChangeEvent[];\n}\n\nexport class MonacoEditorModel implements IResolvedTextEditorModel, TextEditorDocument {\n\n    autoSave: EditorPreferences['files.autoSave'] = 'afterDelay';\n    autoSaveDelay = 500;\n    suppressOpenEditorWhenDirty = false;\n    lineNumbersMinChars = 3;\n\n    /* @deprecated there is no general save timeout, each participant should introduce a sensible timeout  */\n    readonly onWillSaveLoopTimeOut = 1500;\n    protected bufferSavedVersionId: number;\n\n    protected model: ITextModel;\n    protected readonly resolveModel: Promise<void>;\n\n    protected readonly toDispose = new DisposableCollection();\n    protected readonly toDisposeOnAutoSave = new DisposableCollection();\n\n    protected readonly onDidChangeContentEmitter = new Emitter<MonacoModelContentChangedEvent>();\n    readonly onDidChangeContent = this.onDidChangeContentEmitter.event;\n\n    protected readonly onDidSaveModelEmitter = new Emitter<ITextModel>();\n    readonly onDidSaveModel = this.onDidSaveModelEmitter.event;\n\n    protected readonly onWillSaveModelEmitter = new Emitter<WillSaveMonacoModelEvent>();\n    readonly onWillSaveModel = this.onWillSaveModelEmitter.event;\n\n    protected readonly onDidChangeValidEmitter = new Emitter<void>();\n    readonly onDidChangeValid = this.onDidChangeValidEmitter.event;\n\n    protected readonly onDidChangeEncodingEmitter = new Emitter<string>();\n    readonly onDidChangeEncoding = this.onDidChangeEncodingEmitter.event;\n\n    private preferredEncoding: string | undefined;\n    private contentEncoding: string | undefined;\n\n    protected resourceVersion: ResourceVersion | undefined;\n\n    constructor(\n        protected readonly resource: Resource,\n        protected readonly m2p: MonacoToProtocolConverter,\n        protected readonly p2m: ProtocolToMonacoConverter,\n        protected readonly logger?: ILogger,\n        protected readonly editorPreferences?: EditorPreferences\n    ) {\n        this.toDispose.push(resource);\n        this.toDispose.push(this.toDisposeOnAutoSave);\n        this.toDispose.push(this.onDidChangeContentEmitter);\n        this.toDispose.push(this.onDidSaveModelEmitter);\n        this.toDispose.push(this.onWillSaveModelEmitter);\n        this.toDispose.push(this.onDirtyChangedEmitter);\n        this.toDispose.push(this.onDidChangeValidEmitter);\n        this.toDispose.push(Disposable.create(() => this.cancelSave()));\n        this.toDispose.push(Disposable.create(() => this.cancelSync()));\n        this.resolveModel = this.readContents().then(\n            content => this.initialize(content || '')\n        );\n    }\n\n    dispose(): void {\n        this.toDispose.dispose();\n    }\n\n    isDisposed(): boolean {\n        return this.toDispose.disposed;\n    }\n\n    resolve(): Promise<void> {\n        return this.resolveModel;\n    }\n\n    isResolved(): boolean {\n        return Boolean(this.model);\n    }\n\n    setEncoding(encoding: string, mode: EncodingMode): Promise<void> {\n        if (mode === EncodingMode.Decode && this.dirty) {\n            return Promise.resolve();\n        }\n        if (!this.setPreferredEncoding(encoding)) {\n            return Promise.resolve();\n        }\n        if (mode === EncodingMode.Decode) {\n            return this.sync();\n        }\n        return this.scheduleSave(TextDocumentSaveReason.Manual, this.cancelSave(), true);\n    }\n\n    getEncoding(): string | undefined {\n        return this.preferredEncoding || this.contentEncoding;\n    }\n\n    protected setPreferredEncoding(encoding: string): boolean {\n        if (encoding === this.preferredEncoding || (!this.preferredEncoding && encoding === this.contentEncoding)) {\n            return false;\n        }\n        this.preferredEncoding = encoding;\n        this.onDidChangeEncodingEmitter.fire(encoding);\n        return true;\n    }\n\n    protected updateContentEncoding(): void {\n        const contentEncoding = this.resource.encoding;\n        if (!contentEncoding || this.contentEncoding === contentEncoding) {\n            return;\n        }\n        this.contentEncoding = contentEncoding;\n        if (!this.preferredEncoding) {\n            this.onDidChangeEncodingEmitter.fire(contentEncoding);\n        }\n    }\n\n    /**\n     * #### Important\n     * Only this method can create an instance of `monaco.editor.IModel`,\n     * there should not be other calls to `monaco.editor.createModel`.\n     */\n    protected initialize(value: string | ITextBufferFactory): void {\n        if (!this.toDispose.disposed) {\n            const uri = monaco.Uri.parse(this.resource.uri.toString());\n            let firstLine;\n            if (typeof value === 'string') {\n                firstLine = value;\n                const firstLF = value.indexOf('\\n');\n                if (firstLF !== -1) {\n                    firstLine = value.substring(0, firstLF);\n                }\n            } else {\n                firstLine = value.getFirstLineText(1000);\n            }\n            const languageSelection = StandaloneServices.get(ILanguageService).createByFilepathOrFirstLine(uri, firstLine);\n            this.model = StandaloneServices.get(IModelService).createModel(value, languageSelection, uri);\n            this.resourceVersion = this.resource.version;\n            this.setDirty(this._dirty || (this.resource.uri.scheme === UNTITLED_SCHEME && this.model.getValueLength() > 0));\n            this.updateSavedVersionId();\n            this.toDispose.push(this.model);\n            this.toDispose.push(this.model.onDidChangeContent(event => this.fireDidChangeContent(event)));\n            if (this.resource.onDidChangeContents) {\n                this.toDispose.push(this.resource.onDidChangeContents(() => this.sync()));\n            }\n        }\n    }\n\n    /**\n     * Use `valid` to access it.\n     * Use `setValid` to mutate it.\n     */\n    protected _valid = false;\n    /**\n     * Whether it is possible to load content from the underlying resource.\n     */\n    get valid(): boolean {\n        return this._valid;\n    }\n    protected setValid(valid: boolean): void {\n        if (valid === this._valid) {\n            return;\n        }\n        this._valid = valid;\n        this.onDidChangeValidEmitter.fire(undefined);\n    }\n\n    protected _dirty = false;\n    get dirty(): boolean {\n        return this._dirty;\n    }\n    protected setDirty(dirty: boolean): void {\n        if (dirty === this._dirty) {\n            return;\n        }\n        this._dirty = dirty;\n        if (dirty === false) {\n            this.updateSavedVersionId();\n        }\n        this.onDirtyChangedEmitter.fire(undefined);\n    }\n\n    private updateSavedVersionId(): void {\n        this.bufferSavedVersionId = this.model.getAlternativeVersionId();\n    }\n\n    protected readonly onDirtyChangedEmitter = new Emitter<void>();\n    get onDirtyChanged(): Event<void> {\n        return this.onDirtyChangedEmitter.event;\n    }\n\n    get uri(): string {\n        return this.resource.uri.toString();\n    }\n\n    protected _languageId: string | undefined;\n    get languageId(): string {\n        return this._languageId !== undefined ? this._languageId : this.model.getLanguageId();\n    }\n\n    getLanguageId(): string | undefined {\n        return this.languageId;\n    }\n\n    /**\n     * It's a hack to dispatch close notification with an old language id; don't use it.\n     */\n    setLanguageId(languageId: string | undefined): void {\n        this._languageId = languageId;\n    }\n\n    get version(): number {\n        return this.model.getVersionId();\n    }\n\n    /**\n     * Return selected text by Range or all text by default\n     */\n    getText(range?: Range): string {\n        if (!range) {\n            return this.model.getValue();\n        } else {\n            return this.model.getValueInRange(this.p2m.asRange(range));\n        }\n    }\n\n    positionAt(offset: number): Position {\n        const { lineNumber, column } = this.model.getPositionAt(offset);\n        return this.m2p.asPosition(lineNumber, column);\n    }\n\n    offsetAt(position: Position): number {\n        return this.model.getOffsetAt(this.p2m.asPosition(position));\n    }\n\n    get lineCount(): number {\n        return this.model.getLineCount();\n    }\n\n    /**\n     * Retrieves a line in a text document expressed as a one-based position.\n     */\n    getLineContent(lineNumber: number): string {\n        return this.model.getLineContent(lineNumber);\n    }\n\n    getLineMaxColumn(lineNumber: number): number {\n        return this.model.getLineMaxColumn(lineNumber);\n    }\n\n    toValidPosition(position: Position): Position {\n        const { lineNumber, column } = this.model.validatePosition(this.p2m.asPosition(position));\n        return this.m2p.asPosition(lineNumber, column);\n    }\n\n    toValidRange(range: Range): Range {\n        return this.m2p.asRange(this.model.validateRange(this.p2m.asRange(range)));\n    }\n\n    get readOnly(): boolean {\n        return this.resource.saveContents === undefined;\n    }\n\n    isReadonly(): boolean {\n        return this.readOnly;\n    }\n\n    get onDispose(): monaco.IEvent<void> {\n        return this.toDispose.onDispose;\n    }\n\n    get onWillDispose(): Event<void> {\n        return this.toDispose.onDispose;\n    }\n\n    // We have a TypeScript problem here. There is a const enum `DefaultEndOfLine` used for ITextModel and a non-const redeclaration of that enum in the public API in\n    // Monaco.editor. The values will be the same, but TS won't accept that the two enums are equivalent, so it says these types are irreconcilable.\n    get textEditorModel(): monaco.editor.ITextModel & ITextModel {\n        // @ts-expect-error ts(2322)\n        return this.model;\n    }\n\n    /**\n     * Find all matches in an editor for the given options.\n     * @param options the options for finding matches.\n     *\n     * @returns the list of matches.\n     */\n    findMatches(options: FindMatchesOptions): FindMatch[] {\n        const wordSeparators = this.editorPreferences?.['editor.wordSeparators'] ?? editorGeneratedPreferenceProperties['editor.wordSeparators'].default as string;\n        const results: monaco.editor.FindMatch[] = this.model.findMatches(\n            options.searchString,\n            false,\n            options.isRegex,\n            options.matchCase,\n            // eslint-disable-next-line no-null/no-null\n            options.matchWholeWord ? wordSeparators : null,\n            true,\n            options.limitResultCount\n        );\n        const extractedMatches: FindMatch[] = [];\n        results.forEach(r => {\n            if (r.matches) {\n                extractedMatches.push({\n                    matches: r.matches,\n                    range: Range.create(r.range.startLineNumber, r.range.startColumn, r.range.endLineNumber, r.range.endColumn)\n                });\n            }\n        });\n        return extractedMatches;\n    }\n\n    async load(): Promise<MonacoEditorModel> {\n        await this.resolveModel;\n        return this;\n    }\n\n    save(options?: SaveOptions): Promise<void> {\n        return this.scheduleSave(TextDocumentSaveReason.Manual, undefined, undefined, options);\n    }\n\n    protected pendingOperation = Promise.resolve();\n    protected async run(operation: () => Promise<void>): Promise<void> {\n        if (this.toDispose.disposed) {\n            return;\n        }\n        return this.pendingOperation = this.pendingOperation.then(async () => {\n            try {\n                await operation();\n            } catch (e) {\n                console.error(e);\n            }\n        });\n    }\n\n    protected syncCancellationTokenSource = new CancellationTokenSource();\n    protected cancelSync(): CancellationToken {\n        this.trace(log => log('MonacoEditorModel.cancelSync'));\n        this.syncCancellationTokenSource.cancel();\n        this.syncCancellationTokenSource = new CancellationTokenSource();\n        return this.syncCancellationTokenSource.token;\n    }\n\n    async sync(): Promise<void> {\n        const token = this.cancelSync();\n        return this.run(() => this.doSync(token));\n    }\n    protected async doSync(token: CancellationToken): Promise<void> {\n        this.trace(log => log('MonacoEditorModel.doSync - enter'));\n        if (token.isCancellationRequested) {\n            this.trace(log => log('MonacoEditorModel.doSync - exit - cancelled'));\n            return;\n        }\n\n        const value = await this.readContents();\n        if (value === undefined) {\n            this.trace(log => log('MonacoEditorModel.doSync - exit - resource not found'));\n            return;\n        }\n        if (token.isCancellationRequested) {\n            this.trace(log => log('MonacoEditorModel.doSync - exit - cancelled while looking for a resource'));\n            return;\n        }\n        if (this._dirty) {\n            this.trace(log => log('MonacoEditorModel.doSync - exit - pending dirty changes'));\n            return;\n        }\n\n        this.resourceVersion = this.resource.version;\n        this.updateModel(() => StandaloneServices.get(IModelService).updateModel(this.model, value), {\n            ignoreDirty: true,\n            ignoreContentChanges: true\n        });\n        this.trace(log => log('MonacoEditorModel.doSync - exit'));\n    }\n    protected async readContents(): Promise<string | ITextBufferFactory | undefined> {\n        try {\n            const options = { encoding: this.getEncoding() };\n            const content = await (this.resource.readStream ? this.resource.readStream(options) : this.resource.readContents(options));\n            let value;\n            if (typeof content === 'string') {\n                value = content;\n            } else {\n                value = createTextBufferFactoryFromStream(content);\n            }\n            this.updateContentEncoding();\n            this.setValid(true);\n            return value;\n        } catch (e) {\n            this.setValid(false);\n            if (ResourceError.NotFound.is(e)) {\n                return undefined;\n            }\n            throw e;\n        }\n    }\n\n    protected ignoreDirtyEdits = false;\n    protected markAsDirty(): void {\n        this.trace(log => log('MonacoEditorModel.markAsDirty - enter'));\n        if (this.ignoreDirtyEdits) {\n            this.trace(log => log('MonacoEditorModel.markAsDirty - exit - ignoring dirty changes enabled'));\n            return;\n        }\n        this.cancelSync();\n        this.setDirty(true);\n        this.doAutoSave();\n        this.trace(log => log('MonacoEditorModel.markAsDirty - exit'));\n    }\n\n    protected doAutoSave(): void {\n        if (this.autoSave !== 'off' && this.resource.uri.scheme !== UNTITLED_SCHEME) {\n            const token = this.cancelSave();\n            this.toDisposeOnAutoSave.dispose();\n            const handle = window.setTimeout(() => {\n                this.scheduleSave(TextDocumentSaveReason.AfterDelay, token);\n            }, this.autoSaveDelay);\n            this.toDisposeOnAutoSave.push(Disposable.create(() =>\n                window.clearTimeout(handle))\n            );\n        }\n    }\n\n    protected saveCancellationTokenSource = new CancellationTokenSource();\n    protected cancelSave(): CancellationToken {\n        this.trace(log => log('MonacoEditorModel.cancelSave'));\n        this.saveCancellationTokenSource.cancel();\n        this.saveCancellationTokenSource = new CancellationTokenSource();\n        return this.saveCancellationTokenSource.token;\n    }\n\n    protected scheduleSave(reason: TextDocumentSaveReason, token: CancellationToken = this.cancelSave(), overwriteEncoding?: boolean, options?: SaveOptions): Promise<void> {\n        return this.run(() => this.doSave(reason, token, overwriteEncoding, options));\n    }\n\n    protected ignoreContentChanges = false;\n    protected readonly contentChanges: TextDocumentContentChangeEvent[] = [];\n    protected pushContentChanges(contentChanges: TextDocumentContentChangeEvent[]): void {\n        if (!this.ignoreContentChanges) {\n            this.contentChanges.push(...contentChanges);\n        }\n    }\n\n    protected fireDidChangeContent(event: monaco.editor.IModelContentChangedEvent): void {\n        this.trace(log => log(`MonacoEditorModel.fireDidChangeContent - enter - ${JSON.stringify(event, undefined, 2)}`));\n        if (this.model.getAlternativeVersionId() === this.bufferSavedVersionId) {\n            this.setDirty(false);\n        } else {\n            this.markAsDirty();\n        }\n\n        const changeContentEvent = this.asContentChangedEvent(event);\n        this.onDidChangeContentEmitter.fire(changeContentEvent);\n        this.pushContentChanges(changeContentEvent.contentChanges);\n        this.trace(log => log('MonacoEditorModel.fireDidChangeContent - exit'));\n    }\n    protected asContentChangedEvent(event: monaco.editor.IModelContentChangedEvent): MonacoModelContentChangedEvent {\n        const contentChanges = event.changes.map(change => this.asTextDocumentContentChangeEvent(change));\n        return { model: this, contentChanges };\n    }\n    protected asTextDocumentContentChangeEvent(change: monaco.editor.IModelContentChange): TextDocumentContentChangeEvent {\n        const range = this.m2p.asRange(change.range);\n        const rangeLength = change.rangeLength;\n        const text = change.text;\n        return { range, rangeLength, text };\n    }\n\n    protected applyEdits(\n        operations: monaco.editor.IIdentifiedSingleEditOperation[],\n        options?: Partial<MonacoEditorModel.ApplyEditsOptions>\n    ): void {\n        return this.updateModel(() => this.model.applyEdits(operations), options);\n    }\n\n    protected updateModel<T>(doUpdate: () => T, options?: Partial<MonacoEditorModel.ApplyEditsOptions>): T {\n        const resolvedOptions: MonacoEditorModel.ApplyEditsOptions = {\n            ignoreDirty: false,\n            ignoreContentChanges: false,\n            ...options\n        };\n        const { ignoreDirtyEdits, ignoreContentChanges } = this;\n        this.ignoreDirtyEdits = resolvedOptions.ignoreDirty;\n        this.ignoreContentChanges = resolvedOptions.ignoreContentChanges;\n        try {\n            return doUpdate();\n        } finally {\n            this.ignoreDirtyEdits = ignoreDirtyEdits;\n            this.ignoreContentChanges = ignoreContentChanges;\n        }\n    }\n\n    protected async doSave(reason: TextDocumentSaveReason, token: CancellationToken, overwriteEncoding?: boolean, options?: SaveOptions): Promise<void> {\n        if (token.isCancellationRequested || !this.resource.saveContents) {\n            return;\n        }\n\n        await this.fireWillSaveModel(reason, token, options);\n        if (token.isCancellationRequested) {\n            return;\n        }\n\n        const changes = [...this.contentChanges];\n        if (changes.length === 0 && !overwriteEncoding && reason !== TextDocumentSaveReason.Manual) {\n            return;\n        }\n\n        const contentLength = this.model.getValueLength();\n        const content = this.model.createSnapshot() || this.model.getValue();\n        try {\n            const encoding = this.getEncoding();\n            const version = this.resourceVersion;\n            await Resource.save(this.resource, { changes, content, contentLength, options: { encoding, overwriteEncoding, version } }, token);\n            this.contentChanges.splice(0, changes.length);\n            this.resourceVersion = this.resource.version;\n            this.updateContentEncoding();\n            this.setValid(true);\n\n            if (token.isCancellationRequested) {\n                return;\n            }\n\n            this.setDirty(false);\n            this.fireDidSaveModel();\n        } catch (e) {\n            if (!ResourceError.OutOfSync.is(e)) {\n                throw e;\n            }\n        }\n    }\n\n    protected async fireWillSaveModel(reason: TextDocumentSaveReason, token: CancellationToken, options?: SaveOptions): Promise<void> {\n        type EditContributor = Thenable<monaco.editor.IIdentifiedSingleEditOperation[]>;\n\n        const firing = this.onWillSaveModelEmitter.sequence(async listener => {\n            if (token.isCancellationRequested) {\n                return false;\n            }\n            const waitables: EditContributor[] = [];\n            const { version } = this;\n\n            const event = {\n                model: this, reason, options,\n                waitUntil: (thenable: EditContributor) => {\n                    if (Object.isFrozen(waitables)) {\n                        throw new Error('waitUntil cannot be called asynchronously.');\n                    }\n                    waitables.push(thenable);\n                }\n            };\n\n            // Fire.\n            try {\n                listener(event);\n            } catch (err) {\n                console.error(err);\n                return true;\n            }\n\n            // Asynchronous calls to `waitUntil` should fail.\n            Object.freeze(waitables);\n\n            // Wait for all promises.\n            const edits = await Promise.all(waitables).then(allOperations =>\n                ([] as monaco.editor.IIdentifiedSingleEditOperation[]).concat(...allOperations)\n            );\n            if (token.isCancellationRequested) {\n                return false;\n            }\n\n            // In a perfect world, we should only apply edits if document is clean.\n            if (version !== this.version) {\n                console.error('onWillSave listeners should provide edits, not directly alter the document.');\n            }\n\n            // Finally apply edits provided by this listener before firing the next.\n            if (edits && edits.length > 0) {\n                this.applyEdits(edits, {\n                    ignoreDirty: true,\n                });\n            }\n\n            return true;\n        });\n\n        try {\n            await firing;\n        } catch (e) {\n            console.error(e);\n        }\n    }\n\n    protected fireDidSaveModel(): void {\n        this.onDidSaveModelEmitter.fire(this.model);\n    }\n\n    async revert(options?: Saveable.RevertOptions): Promise<void> {\n        this.trace(log => log('MonacoEditorModel.revert - enter'));\n        this.cancelSave();\n        const soft = options && options.soft;\n        if (soft !== true) {\n            const dirty = this._dirty;\n            this._dirty = false;\n            try {\n                await this.sync();\n            } finally {\n                this._dirty = dirty;\n            }\n        }\n        this.setDirty(false);\n        this.trace(log => log('MonacoEditorModel.revert - exit'));\n    }\n\n    createSnapshot(preserveBOM?: boolean): ITextSnapshot {\n        return this.model.createSnapshot(preserveBOM);\n    }\n\n    applySnapshot(snapshot: Saveable.Snapshot): void {\n        const value = 'value' in snapshot ? snapshot.value : snapshot.read() ?? '';\n        this.model.setValue(value);\n    }\n\n    protected trace(loggable: Loggable): void {\n        if (this.logger) {\n            this.logger.debug((log: Log) =>\n                loggable((message, ...params) => log(message, ...params, this.resource.uri.toString(true)))\n            );\n        }\n    }\n\n}\nexport namespace MonacoEditorModel {\n    export interface ApplyEditsOptions {\n        ignoreDirty: boolean\n        ignoreContentChanges: boolean\n    }\n}\n","// *****************************************************************************\n// Copyright (C) 2018 TypeFox and others.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n// *****************************************************************************\n\nimport { inject, injectable, named, postConstruct } from '@theia/core/shared/inversify';\nimport URI from '@theia/core/lib/common/uri';\nimport { ResourceProvider, ReferenceCollection, Event, MaybePromise, Resource, ContributionProvider, OS } from '@theia/core';\nimport { EditorPreferences, EditorPreferenceChange } from '@theia/editor/lib/browser';\nimport { MonacoEditorModel } from './monaco-editor-model';\nimport { IDisposable, IReference } from '@theia/monaco-editor-core/esm/vs/base/common/lifecycle';\nimport { MonacoToProtocolConverter } from './monaco-to-protocol-converter';\nimport { ProtocolToMonacoConverter } from './protocol-to-monaco-converter';\nimport { ILogger } from '@theia/core/lib/common/logger';\nimport * as monaco from '@theia/monaco-editor-core';\nimport { ITextModelService, ITextModelContentProvider } from '@theia/monaco-editor-core/esm/vs/editor/common/services/resolverService';\nimport { ITextModelUpdateOptions } from '@theia/monaco-editor-core/esm/vs/editor/common/model';\nimport { FileService } from '@theia/filesystem/lib/browser/file-service';\nimport { StandaloneServices } from '@theia/monaco-editor-core/esm/vs/editor/standalone/browser/standaloneServices';\nimport { ITextResourcePropertiesService } from '@theia/monaco-editor-core/esm/vs/editor/common/services/textResourceConfiguration';\n\nexport const MonacoEditorModelFactory = Symbol('MonacoEditorModelFactory');\nexport interface MonacoEditorModelFactory {\n\n    readonly scheme: string;\n\n    createModel(\n        resource: Resource\n    ): MaybePromise<MonacoEditorModel>;\n\n}\n\n@injectable()\nexport class MonacoTextModelService implements ITextModelService {\n    declare readonly _serviceBrand: undefined;\n\n    /**\n     * This component does some asynchronous work before being fully initialized.\n     *\n     * @deprecated since 1.25.0. Is instantly resolved.\n     */\n    readonly ready: Promise<void> = Promise.resolve();\n\n    protected readonly _models = new ReferenceCollection<string, MonacoEditorModel>(\n        uri => this.loadModel(new URI(uri))\n    );\n\n    @inject(ResourceProvider)\n    protected readonly resourceProvider: ResourceProvider;\n\n    @inject(EditorPreferences)\n    protected readonly editorPreferences: EditorPreferences;\n\n    @inject(MonacoToProtocolConverter)\n    protected readonly m2p: MonacoToProtocolConverter;\n\n    @inject(ProtocolToMonacoConverter)\n    protected readonly p2m: ProtocolToMonacoConverter;\n\n    @inject(ContributionProvider)\n    @named(MonacoEditorModelFactory)\n    protected readonly factories: ContributionProvider<MonacoEditorModelFactory>;\n\n    @inject(ILogger)\n    protected readonly logger: ILogger;\n\n    @inject(FileService)\n    protected readonly fileService: FileService;\n\n    @postConstruct()\n    public init(): void {\n        const resourcePropertiesService = StandaloneServices.get(ITextResourcePropertiesService);\n\n        if (resourcePropertiesService) {\n            resourcePropertiesService.getEOL = () => {\n                const eol = this.editorPreferences['files.eol'];\n                if (eol && eol !== 'auto') {\n                    return eol;\n                }\n                return OS.backend.isWindows ? '\\r\\n' : '\\n';\n            };\n        }\n    }\n\n    get models(): MonacoEditorModel[] {\n        return this._models.values();\n    }\n\n    get(uri: string): MonacoEditorModel | undefined {\n        return this._models.get(uri);\n    }\n\n    get onDidCreate(): Event<MonacoEditorModel> {\n        return this._models.onDidCreate;\n    }\n\n    createModelReference(raw: monaco.Uri | URI): Promise<IReference<MonacoEditorModel>> {\n        return this._models.acquire(raw.toString());\n    }\n\n    protected async loadModel(uri: URI): Promise<MonacoEditorModel> {\n        await this.editorPreferences.ready;\n        const resource = await this.resourceProvider(uri);\n        const model = await (await this.createModel(resource)).load();\n        this.updateModel(model);\n        model.textEditorModel.onDidChangeLanguage(() => this.updateModel(model));\n        const disposable = this.editorPreferences.onPreferenceChanged(change => this.updateModel(model, change));\n        model.onDispose(() => disposable.dispose());\n        return model;\n    }\n\n    protected createModel(resource: Resource): MaybePromise<MonacoEditorModel> {\n        const factory = this.factories.getContributions().find(({ scheme }) => resource.uri.scheme === scheme);\n        return factory ? factory.createModel(resource) : new MonacoEditorModel(resource, this.m2p, this.p2m, this.logger, this.editorPreferences);\n    }\n\n    protected readonly modelOptions: { [name: string]: (keyof ITextModelUpdateOptions | undefined) } = {\n        'editor.tabSize': 'tabSize',\n        'editor.insertSpaces': 'insertSpaces'\n    };\n\n    protected toModelOption(editorPreference: EditorPreferenceChange['preferenceName']): keyof ITextModelUpdateOptions | undefined {\n        switch (editorPreference) {\n            case 'editor.tabSize': return 'tabSize';\n            case 'editor.insertSpaces': return 'insertSpaces';\n            case 'editor.bracketPairColorization.enabled':\n            case 'editor.bracketPairColorization.independentColorPoolPerBracketType':\n                return 'bracketColorizationOptions';\n            case 'editor.trimAutoWhitespace': return 'trimAutoWhitespace';\n\n        }\n        return undefined;\n    }\n\n    protected updateModel(model: MonacoEditorModel, change?: EditorPreferenceChange): void {\n        if (!change) {\n            model.autoSave = this.editorPreferences.get('files.autoSave', undefined, model.uri);\n            model.autoSaveDelay = this.editorPreferences.get('files.autoSaveDelay', undefined, model.uri);\n            model.textEditorModel.updateOptions(this.getModelOptions(model));\n        } else if (change.affects(model.uri, model.languageId)) {\n            if (change.preferenceName === 'files.autoSave') {\n                model.autoSave = this.editorPreferences.get('files.autoSave', undefined, model.uri);\n            }\n            if (change.preferenceName === 'files.autoSaveDelay') {\n                model.autoSaveDelay = this.editorPreferences.get('files.autoSaveDelay', undefined, model.uri);\n            }\n            const modelOption = this.toModelOption(change.preferenceName);\n            if (modelOption) {\n                model.textEditorModel.updateOptions(this.getModelOptions(model));\n            }\n        }\n    }\n\n    /** @deprecated pass MonacoEditorModel instead  */\n    protected getModelOptions(uri: string): ITextModelUpdateOptions;\n    protected getModelOptions(model: MonacoEditorModel): ITextModelUpdateOptions;\n    protected getModelOptions(arg: string | MonacoEditorModel): ITextModelUpdateOptions {\n        const uri = typeof arg === 'string' ? arg : arg.uri;\n        const overrideIdentifier = typeof arg === 'string' ? undefined : arg.languageId;\n        return {\n            tabSize: this.editorPreferences.get({ preferenceName: 'editor.tabSize', overrideIdentifier }, undefined, uri),\n            insertSpaces: this.editorPreferences.get({ preferenceName: 'editor.insertSpaces', overrideIdentifier }, undefined, uri),\n            bracketColorizationOptions: {\n                enabled: this.editorPreferences.get({ preferenceName: 'editor.bracketPairColorization.enabled', overrideIdentifier }, undefined, uri),\n                independentColorPoolPerBracketType: this.editorPreferences.get(\n                    { preferenceName: 'editor.bracketPairColorization.independentColorPoolPerBracketType', overrideIdentifier }, undefined, uri),\n            },\n            trimAutoWhitespace: this.editorPreferences.get({ preferenceName: 'editor.trimAutoWhitespace', overrideIdentifier }, undefined, uri),\n        };\n    }\n\n    registerTextModelContentProvider(scheme: string, provider: ITextModelContentProvider): IDisposable {\n        return {\n            dispose(): void {\n                // no-op\n            }\n        };\n    }\n\n    canHandleResource(resource: monaco.Uri): boolean {\n        return this.fileService.canHandleResource(new URI(resource));\n    }\n}\n","// *****************************************************************************\n// Copyright (C) 2018 TypeFox and others.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n// *****************************************************************************\n\n/* eslint-disable no-null/no-null */\n\nimport { URI as Uri } from '@theia/core/shared/vscode-uri';\nimport { injectable, inject, postConstruct } from '@theia/core/shared/inversify';\nimport URI from '@theia/core/lib/common/uri';\nimport { Emitter } from '@theia/core/lib/common/event';\nimport { FileSystemPreferences } from '@theia/filesystem/lib/browser';\nimport { EditorManager } from '@theia/editor/lib/browser';\nimport { MonacoTextModelService } from './monaco-text-model-service';\nimport { WillSaveMonacoModelEvent, MonacoEditorModel, MonacoModelContentChangedEvent } from './monaco-editor-model';\nimport { MonacoEditor } from './monaco-editor';\nimport { ProblemManager } from '@theia/markers/lib/browser';\nimport { ArrayUtils } from '@theia/core/lib/common/types';\nimport { FileService } from '@theia/filesystem/lib/browser/file-service';\nimport { FileSystemProviderCapabilities } from '@theia/filesystem/lib/common/files';\nimport * as monaco from '@theia/monaco-editor-core';\nimport {\n    IBulkEditResult, ResourceEdit, ResourceFileEdit as MonacoResourceFileEdit,\n    ResourceTextEdit as MonacoResourceTextEdit\n} from '@theia/monaco-editor-core/esm/vs/editor/browser/services/bulkEditService';\nimport { IEditorWorkerService } from '@theia/monaco-editor-core/esm/vs/editor/common/services/editorWorker';\nimport { StandaloneServices } from '@theia/monaco-editor-core/esm/vs/editor/standalone/browser/standaloneServices';\nimport { EndOfLineSequence } from '@theia/monaco-editor-core/esm/vs/editor/common/model';\nimport { SnippetParser } from '@theia/monaco-editor-core/esm/vs/editor/contrib/snippet/browser/snippetParser';\nimport { TextEdit } from '@theia/monaco-editor-core/esm/vs/editor/common/languages';\nimport { SnippetController2 } from '@theia/monaco-editor-core/esm/vs/editor/contrib/snippet/browser/snippetController2';\nimport { isObject, MaybePromise } from '@theia/core/lib/common';\n\nexport namespace WorkspaceFileEdit {\n    export function is(arg: Edit): arg is monaco.languages.IWorkspaceFileEdit {\n        return ('oldResource' in arg && monaco.Uri.isUri(arg.oldResource)) ||\n            ('newResource' in arg && monaco.Uri.isUri(arg.newResource));\n    }\n}\n\nexport namespace WorkspaceTextEdit {\n    export function is(arg: Edit): arg is monaco.languages.IWorkspaceTextEdit {\n        return isObject<monaco.languages.IWorkspaceTextEdit>(arg)\n            && monaco.Uri.isUri(arg.resource)\n            && isObject(arg.textEdit);\n    }\n}\n\nexport type Edit = monaco.languages.IWorkspaceFileEdit | monaco.languages.IWorkspaceTextEdit;\n\nexport namespace ResourceFileEdit {\n    export function is(arg: ResourceEdit): arg is MonacoResourceFileEdit {\n        return isObject<MonacoResourceFileEdit>(arg) && (monaco.Uri.isUri(arg.oldResource) || monaco.Uri.isUri(arg.newResource));\n    }\n}\n\nexport namespace ResourceTextEdit {\n    export function is(arg: ResourceEdit): arg is MonacoResourceTextEdit {\n        return ('resource' in arg && monaco.Uri.isUri((arg as MonacoResourceTextEdit).resource));\n    }\n}\n\nexport interface WorkspaceFoldersChangeEvent {\n    readonly added: WorkspaceFolder[];\n    readonly removed: WorkspaceFolder[];\n}\n\nexport interface WorkspaceFolder {\n    readonly uri: Uri;\n    readonly name: string;\n    readonly index: number;\n}\n\n@injectable()\nexport class MonacoWorkspace {\n\n    protected resolveReady: () => void;\n    readonly ready = new Promise<void>(resolve => {\n        this.resolveReady = resolve;\n    });\n\n    protected readonly onDidOpenTextDocumentEmitter = new Emitter<MonacoEditorModel>();\n    readonly onDidOpenTextDocument = this.onDidOpenTextDocumentEmitter.event;\n\n    protected readonly onDidCloseTextDocumentEmitter = new Emitter<MonacoEditorModel>();\n    readonly onDidCloseTextDocument = this.onDidCloseTextDocumentEmitter.event;\n\n    protected readonly onDidChangeTextDocumentEmitter = new Emitter<MonacoModelContentChangedEvent>();\n    readonly onDidChangeTextDocument = this.onDidChangeTextDocumentEmitter.event;\n\n    protected readonly onWillSaveTextDocumentEmitter = new Emitter<WillSaveMonacoModelEvent>();\n    readonly onWillSaveTextDocument = this.onWillSaveTextDocumentEmitter.event;\n\n    protected readonly onDidSaveTextDocumentEmitter = new Emitter<MonacoEditorModel>();\n    readonly onDidSaveTextDocument = this.onDidSaveTextDocumentEmitter.event;\n\n    @inject(FileService)\n    protected readonly fileService: FileService;\n\n    @inject(FileSystemPreferences)\n    protected readonly filePreferences: FileSystemPreferences;\n\n    @inject(MonacoTextModelService)\n    protected readonly textModelService: MonacoTextModelService;\n\n    @inject(EditorManager)\n    protected readonly editorManager: EditorManager;\n\n    @inject(ProblemManager)\n    protected readonly problems: ProblemManager;\n\n    @postConstruct()\n    protected init(): void {\n        this.resolveReady();\n\n        for (const model of this.textModelService.models) {\n            this.fireDidOpen(model);\n        }\n        this.textModelService.onDidCreate(model => this.fireDidOpen(model));\n    }\n\n    get textDocuments(): MonacoEditorModel[] {\n        return this.textModelService.models;\n    }\n\n    getTextDocument(uri: string): MonacoEditorModel | undefined {\n        return this.textModelService.get(uri);\n    }\n\n    protected fireDidOpen(model: MonacoEditorModel): void {\n        this.doFireDidOpen(model);\n        model.textEditorModel.onDidChangeLanguage(e => {\n            this.problems.cleanAllMarkers(new URI(model.uri));\n            model.setLanguageId(e.oldLanguage);\n            try {\n                this.fireDidClose(model);\n            } finally {\n                model.setLanguageId(undefined);\n            }\n            this.doFireDidOpen(model);\n        });\n        model.onDidChangeContent(event => this.fireDidChangeContent(event));\n        model.onDidSaveModel(() => this.fireDidSave(model));\n        model.onWillSaveModel(event => this.fireWillSave(event));\n        model.onDirtyChanged(() => this.openEditorIfDirty(model));\n        model.onDispose(() => this.fireDidClose(model));\n    }\n\n    protected doFireDidOpen(model: MonacoEditorModel): void {\n        this.onDidOpenTextDocumentEmitter.fire(model);\n    }\n\n    protected fireDidClose(model: MonacoEditorModel): void {\n        this.onDidCloseTextDocumentEmitter.fire(model);\n    }\n\n    protected fireDidChangeContent(event: MonacoModelContentChangedEvent): void {\n        this.onDidChangeTextDocumentEmitter.fire(event);\n    }\n\n    protected fireWillSave(event: WillSaveMonacoModelEvent): void {\n        this.onWillSaveTextDocumentEmitter.fire(event);\n    }\n\n    protected fireDidSave(model: MonacoEditorModel): void {\n        this.onDidSaveTextDocumentEmitter.fire(model);\n    }\n\n    protected readonly suppressedOpenIfDirty: MonacoEditorModel[] = [];\n\n    protected openEditorIfDirty(model: MonacoEditorModel): void {\n        if (model.suppressOpenEditorWhenDirty || this.suppressedOpenIfDirty.indexOf(model) !== -1) {\n            return;\n        }\n        if (model.dirty && MonacoEditor.findByDocument(this.editorManager, model).length === 0) {\n            // create a new reference to make sure the model is not disposed before it is\n            // acquired by the editor, thus losing the changes that made it dirty.\n            this.textModelService.createModelReference(model.textEditorModel.uri).then(ref => {\n                (\n                    model.autoSave !== 'off' ? new Promise(resolve => model.onDidSaveModel(resolve)) :\n                        this.editorManager.open(new URI(model.uri), { mode: 'open' })\n                ).then(\n                    () => ref.dispose()\n                );\n            });\n        }\n    }\n\n    protected async suppressOpenIfDirty(model: MonacoEditorModel, cb: () => MaybePromise<void>): Promise<void> {\n        this.suppressedOpenIfDirty.push(model);\n        try {\n            await cb();\n        } finally {\n            const i = this.suppressedOpenIfDirty.indexOf(model);\n            if (i !== -1) {\n                this.suppressedOpenIfDirty.splice(i, 1);\n            }\n        }\n    }\n\n    /**\n     * Applies given edits to the given model.\n     * The model is saved if no editors is opened for it.\n     */\n    applyBackgroundEdit(model: MonacoEditorModel, editOperations: monaco.editor.IIdentifiedSingleEditOperation[], shouldSave = true): Promise<void> {\n        return this.suppressOpenIfDirty(model, async () => {\n            const editor = MonacoEditor.findByDocument(this.editorManager, model)[0];\n            const cursorState = editor && editor.getControl().getSelections() || [];\n            model.textEditorModel.pushStackElement();\n            model.textEditorModel.pushEditOperations(cursorState, editOperations, () => cursorState);\n            model.textEditorModel.pushStackElement();\n            if (!editor && shouldSave) {\n                await model.save();\n            }\n        });\n    }\n\n    async applyBulkEdit(edits: ResourceEdit[]): Promise<IBulkEditResult & { success: boolean }> {\n        try {\n            let totalEdits = 0;\n            let totalFiles = 0;\n            const fileEdits = edits.filter(edit => edit instanceof MonacoResourceFileEdit);\n            const [snippetEdits, textEdits] = ArrayUtils.partition(edits.filter(edit => edit instanceof MonacoResourceTextEdit) as MonacoResourceTextEdit[],\n                edit => edit.textEdit.insertAsSnippet && (edit.resource.toString() === this.editorManager.activeEditor?.getResourceUri()?.toString()));\n\n            if (fileEdits.length > 0) {\n                await this.performFileEdits(<MonacoResourceFileEdit[]>fileEdits);\n            }\n\n            if (textEdits.length > 0) {\n                const result = await this.performTextEdits(<MonacoResourceTextEdit[]>textEdits);\n                totalEdits += result.totalEdits;\n                totalFiles += result.totalFiles;\n            }\n\n            if (snippetEdits.length > 0) {\n                await this.performSnippetEdits(<MonacoResourceTextEdit[]>snippetEdits);\n            }\n\n            const ariaSummary = this.getAriaSummary(totalEdits, totalFiles);\n            return { ariaSummary, success: true };\n        } catch (e) {\n            console.error('Failed to apply Resource edits:', e);\n            return {\n                ariaSummary: `Error applying Resource edits: ${e.toString()}`,\n                success: false\n            };\n        }\n    }\n\n    protected getAriaSummary(totalEdits: number, totalFiles: number): string {\n        if (totalEdits === 0) {\n            return 'Made no edits';\n        }\n        if (totalEdits > 1 && totalFiles > 1) {\n            return `Made ${totalEdits} text edits in ${totalFiles} files`;\n        }\n        return `Made ${totalEdits} text edits in one file`;\n    }\n\n    protected async performTextEdits(edits: MonacoResourceTextEdit[]): Promise<{\n        totalEdits: number,\n        totalFiles: number\n    }> {\n        let totalEdits = 0;\n        let totalFiles = 0;\n        const resourceEdits = new Map<string, MonacoResourceTextEdit[]>();\n        for (const edit of edits) {\n            if (typeof edit.versionId === 'number') {\n                const model = this.textModelService.get(edit.resource.toString());\n                if (model && model.textEditorModel.getVersionId() !== edit.versionId) {\n                    throw new Error(`${model.uri} has changed in the meantime`);\n                }\n            }\n            const key = edit.resource.toString();\n            let array = resourceEdits.get(key);\n            if (!array) {\n                array = [];\n                resourceEdits.set(key, array);\n            }\n            array.push(edit);\n        }\n        const pending: Promise<void>[] = [];\n        for (const [key, value] of resourceEdits) {\n            pending.push((async () => {\n                const uri = monaco.Uri.parse(key);\n                let eol: EndOfLineSequence | undefined;\n                const editOperations: monaco.editor.IIdentifiedSingleEditOperation[] = [];\n                const minimalEdits = await StandaloneServices.get(IEditorWorkerService)\n                    .computeMoreMinimalEdits(uri, value.map(edit => this.transformSnippetStringToInsertText(edit)));\n                if (minimalEdits) {\n                    for (const textEdit of minimalEdits) {\n                        if (typeof textEdit.eol === 'number') {\n                            eol = textEdit.eol;\n                        }\n                        if (monaco.Range.isEmpty(textEdit.range) && !textEdit.text) {\n                            // skip no-op\n                            continue;\n                        }\n                        editOperations.push({\n                            forceMoveMarkers: false,\n                            range: monaco.Range.lift(textEdit.range),\n                            text: textEdit.text\n                        });\n                    }\n                }\n                if (!editOperations.length && eol === undefined) {\n                    return;\n                }\n                const reference = await this.textModelService.createModelReference(uri);\n                try {\n                    const document = reference.object as MonacoEditorModel;\n                    const model = document.textEditorModel;\n                    const editor = MonacoEditor.findByDocument(this.editorManager, document)[0];\n                    const cursorState = editor?.getControl().getSelections() ?? [];\n                    // start a fresh operation\n                    model.pushStackElement();\n                    if (editOperations.length) {\n                        model.pushEditOperations(cursorState, editOperations, () => cursorState);\n                    }\n                    if (eol !== undefined) {\n                        model.pushEOL(eol);\n                    }\n                    // push again to make this change an undoable operation\n                    model.pushStackElement();\n                    totalFiles += 1;\n                    totalEdits += editOperations.length;\n                } finally {\n                    reference.dispose();\n                }\n            })());\n        }\n        await Promise.all(pending);\n        return { totalEdits, totalFiles };\n    }\n\n    protected async performFileEdits(edits: MonacoResourceFileEdit[]): Promise<void> {\n        for (const edit of edits) {\n            const options = edit.options || {};\n            if (edit.newResource && edit.oldResource) {\n                // rename\n                if (options.overwrite === undefined && options.ignoreIfExists && await this.fileService.exists(new URI(edit.newResource))) {\n                    return; // not overwriting, but ignoring, and the target file exists\n                }\n                await this.fileService.move(new URI(edit.oldResource), new URI(edit.newResource), { overwrite: options.overwrite });\n            } else if (!edit.newResource && edit.oldResource) {\n                // delete file\n                if (await this.fileService.exists(new URI(edit.oldResource))) {\n                    let useTrash = this.filePreferences['files.enableTrash'];\n                    if (useTrash && !(this.fileService.hasCapability(new URI(edit.oldResource), FileSystemProviderCapabilities.Trash))) {\n                        useTrash = false; // not supported by provider\n                    }\n                    await this.fileService.delete(new URI(edit.oldResource), { useTrash, recursive: options.recursive });\n                } else if (!options.ignoreIfNotExists) {\n                    throw new Error(`${edit.oldResource} does not exist and can not be deleted`);\n                }\n            } else if (edit.newResource && !edit.oldResource) {\n                // create file\n                if (options.overwrite === undefined && options.ignoreIfExists && await this.fileService.exists(new URI(edit.newResource))) {\n                    return; // not overwriting, but ignoring, and the target file exists\n                }\n                await this.fileService.create(new URI(edit.newResource), undefined, { overwrite: options.overwrite });\n            }\n        }\n    }\n\n    protected async performSnippetEdits(edits: MonacoResourceTextEdit[]): Promise<void> {\n        const activeEditor = MonacoEditor.getActive(this.editorManager)?.getControl();\n        if (activeEditor) {\n            const snippetController: SnippetController2 = activeEditor.getContribution('snippetController2')!;\n            snippetController.apply(edits.map(edit => ({ range: monaco.Range.lift(edit.textEdit.range), template: edit.textEdit.text })));\n        }\n    }\n\n    protected transformSnippetStringToInsertText(resourceEdit: MonacoResourceTextEdit): TextEdit & { insertAsSnippet?: boolean } {\n        if (resourceEdit.textEdit.insertAsSnippet) {\n            return { ...resourceEdit.textEdit, insertAsSnippet: false, text: SnippetParser.asInsertText(resourceEdit.textEdit.text) };\n        } else {\n            return resourceEdit.textEdit;\n        }\n    }\n}\n"],"names":[],"sourceRoot":""}